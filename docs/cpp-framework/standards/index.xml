<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Standards on MISA&#43;&#43; Framework</title>
    <link>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/</link>
    <description>Recent content in Standards on MISA&#43;&#43; Framework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Attachments</title>
      <link>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/attachments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/attachments/</guid>
      <description>MISA++ comes with a system to attach quantification results and other information to input and output data. The information is stored within objects that are serialized into JSON format, including additional information such as the object type.
Attachments are saved in the attachments/imported and attachments/exported folders within a MISA++ result folder. The files are structured according to the filesystem (see Parameters).
An attachment file has the following structure:
mermaid.initialize({startOnLoad:true}); graph LR; Root[&#34;</description>
    </item>
    
    <item>
      <title>Module info</title>
      <link>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/module-info/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/module-info/</guid>
      <description>The module information is accessible via the command line parameter &amp;lt;module&amp;gt; --module-info and as JSON file in MISA++ output folders (see Result folder).
It is data in JSON format with following structure:
mermaid.initialize({startOnLoad:true}); graph LR; Root[&#34;root : object&#34;]--Id[&#34;id : string&#34;] Root --Version[&#34;version : string&#34;] Root -.-|Optional| Name[&#34;name : string&#34;] Root -.-|Optional| Description[&#34;description : string&#34;] Root -.-|Optional| Citation[&#34;citation : string&#34;] Root -.-|Optional| URL[&#34;url : string&#34;] Root -.-|Optional| License[&#34;license : string&#34;] Root -.</description>
    </item>
    
    <item>
      <title>Parameter schema</title>
      <link>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/parameter-schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/parameter-schema/</guid>
      <description>The parameter schema can be automatically generated by any MISA++ application and contains all necessary information to create a parameter file (see Parameters).
It follows a modified JSON Schema draft-07 standard.
Modifications to JSON Schema draft-07 Property defitions can contain following additional properties:
 misa:documentation-title (optional string) provides a MISA++-internal documentation title misa:documentation-description (optional string) provides a MISA++-internal documentation description misa:documentation-type-title (optional string) provides a MISA++-internal documentation title. It describes the object type and can be different from misa:documentation-title.</description>
    </item>
    
    <item>
      <title>Parameters</title>
      <link>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/parameters/</guid>
      <description>Parameters are in JSON format and have following structure:
mermaid.initialize({startOnLoad:true}); graph LR; Root[&#34;root : object&#34;]--Filesystem[&#34;filesystem : object&#34;] Filesystem -- FilesystemSource[&#34;source : string&#34;] Filesystem -.-|if source is &#39;json&#39;| FSJsonData[&#34;json-data : string&#34;] Filesystem -.-|if source is &#39;directories&#39;| FSInputDir[&#34;input-directory : string&#34;] Filesystem -.-|if source is &#39;directories&#39;| FSOutputDir[&#34;output-directory : string&#34;] Root --Algorithm[&#34;algorithm : object&#34;] Root --Samples[&#34;samples : object&#34;] Root --Runtime[&#34;runtime : object&#34;] Samples -.-|for each sample| SampleParams[&#34; : object&#34;] Runtime -.-|optional| NumThreads[&#34;num-threads : integer&#34;] Runtime -.</description>
    </item>
    
    <item>
      <title>Public API</title>
      <link>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/public-api/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/public-api/</guid>
      <description>The public API of a MISA++ module should follow a specific structure to make it easier for other developers to use it.
   File/Folder Contains     ./include/&amp;lt;module-name&amp;gt;/accessors/ Derivatives of misaxx::misa_cached_data   ./include/&amp;lt;module-name&amp;gt;/attachments/ Derivatives of misaxx::misa_serializable or misaxx::misa_locatable (preferred). For example quantified data.   ./include/&amp;lt;module-name&amp;gt;/caches/ Derivatives of misaxx::misa_cache   ./include/&amp;lt;module-name&amp;gt;/descriptions/ Derivatives of misaxx::misa_data_description   ./include/&amp;lt;module-name&amp;gt;/patterns/ Derivatives of misaxx::misa_data_pattern   ./include/&amp;lt;module-name&amp;gt;/utils/ Anything else (non-serializable data types, converters, helpers, &amp;hellip;)   .</description>
    </item>
    
    <item>
      <title>Result folder</title>
      <link>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/output-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/output-data/</guid>
      <description>MISA++ framework applications write their output into a folder that contains all neccessary information to repeat the analysis.
The folder has following structure:
mermaid.initialize({startOnLoad:true}); graph LR; A[&#34;Result folder : directory&#34;] -- B[&#34;Parameters : file&#34;] A -- C[&#34;Module Info : file&#34;] A -- D[&#34;Parameter schema : file&#34;] A -- E[&#34;Runtime log : file&#34;] A -- G[&#34;Attachments : folder&#34;] G -- H[&#34;Attachment serialization schemata : file&#34;] G -.-|optional|I[&#34;imported : folder&#34;] G -.-|optional|J[&#34;exported : folder&#34;</description>
    </item>
    
    <item>
      <title>Runtime log</title>
      <link>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/runtime-log/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/runtime-log/</guid>
      <description>The runtime log contains detailed information about individual tasks executed by a MISA++ application.
It is in JSON format and has following structure:
mermaid.initialize({startOnLoad:true}); graph LR; Root[&#34;root : object&#34;]--Entries[&#34;entries : object&#34;] Entries --|for each thread| ThreadEntry[&#34; : array of task-entry&#34;] TaskEntry[&#34;task-entry : object&#34;] -- Name[&#34;name : string&#34;] TaskEntry -- StartTime[&#34;start-time : number&#34;] TaskEntry -- EndTime[&#34;end-time : number&#34;] TaskEntry -- Unit[&#34;unit : string&#34;]  entries A map from thread$ where $ is the thread number to a list of task-entry.</description>
    </item>
    
    <item>
      <title>Serialization ID</title>
      <link>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/serialization-id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://applied-systems-biology.github.io/misa-framework/cpp-framework/standards/serialization-id/</guid>
      <description>A serialization ID uniquely identifies an object type. It consists of two parts separated by a colon:
mermaid.initialize({startOnLoad:true}); graph LR; M[&#34;Module&#34;] -- C[&#34;:&#34;] C -- T[&#34;Type&#34;]  Module Lower-case string that consists only of a-z, 0-9 and -. Should be consistent with the module ID (see Module Info).
Type Lower-case string that consists only of a-z, 0-9, -, _ and / and should form a valid path.
The first segment of the path should be one of the following categories:</description>
    </item>
    
  </channel>
</rss>